generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model events {
  id           Int            @id @default(autoincrement())
  title        String
  event_date   DateTime
  user_id      String?
  created_at   DateTime       @default(now())
  updated_at   DateTime
  users        users?         @relation(fields: [user_id], references: [id])
  participants participants[]
  settlements  settlements[]
  venues       venues[]
}

model participants {
  id          Int           @id @default(autoincrement())
  event_id    Int
  nickname    String
  gender      String?
  role        String?
  stay_range  String
  created_at  DateTime      @default(now())
  events      events        @relation(fields: [event_id], references: [id], onDelete: Cascade)
  settlements settlements[]
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model settlements {
  id             Int          @id @default(autoincrement())
  event_id       Int
  participant_id Int
  amount         Int
  payment_method String?
  status         String       @default("PENDING")
  created_at     DateTime     @default(now())
  updated_at     DateTime
  events         events       @relation(fields: [event_id], references: [id], onDelete: Cascade)
  participants   participants @relation(fields: [participant_id], references: [id], onDelete: Cascade)
}

model users {
  id             String     @id
  name           String?
  email          String?    @unique
  email_verified DateTime?
  image          String?
  created_at     DateTime   @default(now())
  updated_at     DateTime
  accounts       accounts[]
  events         events[]
  sessions       sessions[]
}

model venues {
  id              Int      @id @default(autoincrement())
  event_id        Int
  venue_order     Int
  name            String
  google_maps_url String?
  total_amount    Int
  paid_by         String
  created_at      DateTime @default(now())
  events          events   @relation(fields: [event_id], references: [id], onDelete: Cascade)
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
