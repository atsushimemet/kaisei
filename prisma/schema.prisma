// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  accounts Account[]
  sessions Session[]
  events   Event[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Event {
  id          Int           @id @default(autoincrement())
  title       String
  eventDate   DateTime      @map("event_date")
  userId      String?       @map("user_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  participants Participant[]
  venues       Venue[]
  settlements  Settlement[]

  @@map("events")
}

model Participant {
  id         Int      @id @default(autoincrement())
  eventId    Int      @map("event_id")
  nickname   String
  gender     String?
  role       String?
  stayRange  String   @map("stay_range") // JSON as string for SQLite
  createdAt  DateTime @default(now()) @map("created_at")
  
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  settlements Settlement[]

  @@map("participants")
}

model Venue {
  id            Int      @id @default(autoincrement())
  eventId       Int      @map("event_id")
  venueOrder    Int      @map("venue_order")
  name          String
  googleMapsUrl String?  @map("google_maps_url")
  totalAmount   Int      @map("total_amount")
  paidBy        String   @map("paid_by")
  createdAt     DateTime @default(now()) @map("created_at")
  
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("venues")
}

model Settlement {
  id             Int           @id @default(autoincrement())
  eventId        Int           @map("event_id")
  participantId  Int           @map("participant_id")
  amount         Int
  paymentMethod  String?       @map("payment_method")
  status         String        @default("PENDING") // PENDING, PAID, CANCELLED
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  
  event          Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant    Participant   @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@map("settlements")
}

// Enums converted to strings for SQLite compatibility
// Gender: 'male', 'female', 'unspecified'
// Role: 'senior', 'junior', 'flat' 
// SettlementStatus: 'PENDING', 'PAID', 'CANCELLED' 
